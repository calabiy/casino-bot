import {
  Client, GatewayIntentBits, Partials, Events, REST, Routes,
  SlashCommandBuilder, Interaction, EmbedBuilder, Message, MessageFlags, ActionRowBuilder,
  ButtonBuilder, ButtonStyle, ComponentType, CacheType, StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder, User
} from 'discord.js';
import { config } from 'dotenv';
import {
  initDB, getPoints, addPoints, getLastDaily,
  setLastDaily, getTopUsers, ensureUserExists,
  getUserProfile, updateUserProfile, getShopItems, buyShopItem,
  getUserInventory, addToInventory
} from './db';

config();

const MIN_BET = 200;
const MIN_TRANSFER = 200;
const MIN_PVP_BET = 500;

const POINT_INTERVAL = 60 * 1000; // 1 min
const ENTRY_TTL = 60 * 60 * 1000; // 1 hour

// PvP –∏–≥—Ä—ã
const pvpGames = new Map<string, {
  creator: string;
  opponent?: string;
  bet: number;
  game: 'duel' | 'coinflip' | 'dice';
  createdAt: number;
}>();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildVoiceStates
  ],
  partials: [Partials.Message, Partials.Reaction, Partials.User]
});

const commands = [
  new SlashCommandBuilder().setName('balance').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤'),
  new SlashCommandBuilder().setName('profile').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞')
    .addUserOption(opt => opt.setName('user').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)')),
  new SlashCommandBuilder().setName('menu').setDescription('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ'),
  new SlashCommandBuilder().setName('casino').setDescription('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∫–∞–∑–∏–Ω–æ')
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('jackpot').setDescription('–ê–∑–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º')
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('coinflip').setDescription('–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞')
    .addStringOption(opt => opt.setName('side').setDescription('–°—Ç–æ—Ä–æ–Ω–∞').setRequired(true)
      .addChoices(
        { name: 'ü™ô –û—Ä—ë–ª', value: 'heads' },
        { name: '‚ö° –†–µ—à–∫–∞', value: 'tails' }))
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('pvp').setDescription('PvP –º–µ–Ω—é - –≤—ã–∑–æ–≤—ã –Ω–∞ –¥—É—ç–ª—å'),
  new SlashCommandBuilder().setName('testcasino').setDescription('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ'),
  new SlashCommandBuilder().setName('duel').setDescription('–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å')
    .addUserOption(opt => opt.setName('opponent').setDescription('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫').setRequired(true))
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true))
    .addStringOption(opt => opt.setName('game').setDescription('–¢–∏–ø –∏–≥—Ä—ã').setRequired(true)
      .addChoices(
        { name: 'üé∞ –°–ª–æ—Ç—ã', value: 'slots' },
        { name: 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞', value: 'coinflip' },
        { name: 'üé≤ –ö–æ—Å—Ç–∏', value: 'dice' })),
  new SlashCommandBuilder().setName('shop').setDescription('–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤'),
  new SlashCommandBuilder().setName('inventory').setDescription('–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
  new SlashCommandBuilder().setName('leaderboard').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤'),
  new SlashCommandBuilder().setName('bet').setDescription('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞').addUserOption(opt => opt.setName('opponent').setDescription('–ü—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ –∏–≥—Ä–∞–µ–º').setRequired(true)).addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('daily').setDescription('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å'),
  new SlashCommandBuilder().setName('roulette').setDescription('–†—É–ª–µ—Ç–∫–∞: –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤—å')
    .addStringOption(opt => opt.setName('color').setDescription('–¶–≤–µ—Ç').setRequired(true)
      .addChoices(
        { name: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', value: 'red' },
        { name: '‚ö´ –ß—ë—Ä–Ω—ã–π', value: 'black' },
        { name: 'üü¢ –ó–µ–ª—ë–Ω—ã–π', value: 'green' }))
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('dice').setDescription('–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏')
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('pay').setDescription('–ü–µ—Ä–µ–¥–∞—Ç—å –æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É')
    .addUserOption(opt => opt.setName('user').setDescription('–ö–æ–º—É').setRequired(true))
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°–∫–æ–ª—å–∫–æ').setRequired(true))
].map(c => c.toJSON());

async function registerCommands() {
  const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN!);
  const appId = client.application?.id;
  if (!appId) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å application.id');
  await rest.put(
    Routes.applicationCommands(appId),
    { body: commands }
  );
}

const voiceJoinTimestamps = new Map();

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ –≥–∏—Ñ–∫–∏
const animations = {
  loading: ['‚è≥', '‚åõ', '‚è≥', '‚åõ'],
  slots: ['üé∞', 'üé≤', 'üÉè', 'üéØ', 'üé™'],
  win: ['üéâ', '‚ú®', 'üéä', 'üí•', 'üåü'],
  lose: ['üíî', 'üò≠', 'üôà', 'üòµ', 'üí∏'],
  coinflip: ['ü™ô', '‚ö°', 'üåü', 'üí´']
};

function getRandomAnimation(type: keyof typeof animations): string {
  const arr = animations[type];
  return arr[Math.floor(Math.random() * arr.length)];
}

async function createAnimatedMessage(interaction: any, title: string, description: string, color: any = 'Blue') {
  const loadingEmbed = new EmbedBuilder()
    .setTitle(`${getRandomAnimation('loading')} ${title}`)
    .setDescription('–û–±—Ä–∞–±–æ—Ç–∫–∞...')
    .setColor('Yellow');
  
  await interaction.editReply({ embeds: [loadingEmbed] });
  
  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  const finalEmbed = new EmbedBuilder()
    .setTitle(title)
    .setDescription(description)
    .setColor(color)
    .setTimestamp();
  
  return interaction.editReply({ embeds: [finalEmbed] });
}

client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${client.user?.tag}`);
  await initDB();
  await registerCommands();

  // register all vc members
  for (const guild of client.guilds.cache.values()) {
    for (const channel of guild.channels.cache.values()) {
      if (channel.isVoiceBased()) {
        for (const member of channel.members.values()) {
          voiceJoinTimestamps.set(member.id, { joinedAt: Date.now() });
        }
      }
    }
  }

  //update saved vc members
  setInterval(async () => {
    const now = Date.now();

    for (const [userId, data] of voiceJoinTimestamps.entries()) {
      const { joinedAt } = data;
      await ensureUserExists(userId);

      if (now - joinedAt >= POINT_INTERVAL) {
        addPoints(userId, 10);
        voiceJoinTimestamps.set(userId, { joinedAt: now });
      }

      if (now - joinedAt >= ENTRY_TTL) {
        voiceJoinTimestamps.delete(userId);
      }
    }
  }, POINT_INTERVAL);

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö PvP –∏–≥—Ä
  setInterval(() => {
    const now = Date.now();
    for (const [gameId, game] of pvpGames.entries()) {
      if (now - game.createdAt > 300000) { // 5 –º–∏–Ω—É—Ç
        pvpGames.delete(gameId);
      }
    }
  }, 60000);
});

client.on(Events.VoiceStateUpdate, (oldState, newState) => {
  const userId = newState.id;

  if (!voiceJoinTimestamps.has(userId) && newState.channelId) {
    voiceJoinTimestamps.set(userId, { joinedAt: Date.now() });
  }
  else if (!newState.channelId) {
    voiceJoinTimestamps.delete(userId);
  }
});

client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot) return;
  await ensureUserExists(message.author.id);
  if (Math.random() < 0.5) {
    const pts = Math.floor(Math.random() * 5) + 1;
    await addPoints(message.author.id, pts);
  }
});

client.on(Events.MessageReactionAdd, async (reaction, user) => {
  if (user.bot || !reaction.message.author || reaction.message.author.id === user.id) return;
  await ensureUserExists(reaction.message.author.id);
  await addPoints(reaction.message.author.id, 1);
});

client.on(Events.InteractionCreate, async (interaction: Interaction) => {
  if (interaction.isChatInputCommand()) {
    await handleSlashCommand(interaction);
  } else if (interaction.isButton() || interaction.isStringSelectMenu()) {
    await handleComponentInteraction(interaction);
  }
});

async function handleSlashCommand(interaction: any) {
  try {
    await interaction.deferReply();

    const userId = interaction.user.id;
    await ensureUserExists(userId);

    switch (interaction.commandName) {
      case 'menu':
        await showMainMenu(interaction);
        break;

      case 'profile':
        await showProfile(interaction);
        break;

case 'balance': {
  const profile = await getUserProfile(userId);
  await interaction.editReply({
    embeds: [
      new EmbedBuilder()
        .setTitle('üí∞ –ë–∞–ª–∞–Ω—Å')
        .setDescription(`**${interaction.user.displayName}**\nüíé –û—á–∫–∏: **${profile.points.toLocaleString()}**\nüèÜ –£—Ä–æ–≤–µ–Ω—å: **${profile.level}**\n‚≠ê –û–ø—ã—Ç: **${profile.experience}**`)
        .setColor('Gold')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp()
    ]
  });
  break;
}

case 'testcasino': {
  await interaction.deferReply();
  const casinoBalance = await getPoints('casino');
  await interaction.editReply({
    content: `üé∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: **${casinoBalance.toLocaleString()}** –æ—á–∫–æ–≤.`
  });
  break;
}


      case 'bet': {
  const userId = interaction.user.id;
  const opponent = interaction.options.getUser('opponent', true);
  const bet = interaction.options.getInteger('amount', true);

  if (opponent.bot || opponent.id === userId) {
    await interaction.reply({ content: '–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π –∏–ª–∏ –±–æ—Ç–æ–º.', ephemeral: true });
    return;
  }

  const userPoints = await getPoints(userId);
  const oppPoints = await getPoints(opponent.id);

  if (userPoints < bet || oppPoints < bet) {
    await interaction.reply({ content: '–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤.', ephemeral: true });
    return;
  }

  const win = Math.random() < 0.5;
  const winner = win ? userId : opponent.id;
  const loser = win ? opponent.id : userId;

  await addPoints(winner, bet);
  await addPoints(loser, -bet);

  await interaction.reply({
    embeds: [
      new EmbedBuilder()
        .setTitle('‚öîÔ∏è –î—É—ç–ª—å –∏–≥—Ä–æ–∫–æ–≤')
        .setDescription(`${interaction.user.username} VS ${opponent.username}\n\nüé≤ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@${winner}>\nüí∞ –°—Ç–∞–≤–∫–∞: ${bet}`)
        .setColor('Purple')
    ]
  });
  break;
}

      case 'daily': {
        const last = await getLastDaily(userId);
        const now = Date.now();

        if (last && now - last < 86400000) {
          const left = 86400000 - (now - last);
          const hours = Math.floor(left / 3600000);
          const minutes = Math.floor((left % 3600000) / 60000);

          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚è∞ –£–∂–µ –ø–æ–ª—É—á–∞–ª! –ñ–¥–∏ **${hours}—á ${minutes}–º**`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        const profile = await getUserProfile(userId);
        const bonus = 100 + Math.floor(Math.random() * 50) + (profile.level * 10);
        const expGain = 25;
        
        await addPoints(userId, bonus);
        await updateUserProfile(userId, { experience: profile.experience + expGain });
        await setLastDaily(userId, now);

        await createAnimatedMessage(
          interaction,
          'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
          `${getRandomAnimation('win')} **+${bonus}** –æ—á–∫–æ–≤!\n‚≠ê **+${expGain}** –æ–ø—ã—Ç–∞!`,
          'Green'
        );
        break;
      }

      case 'coinflip': {
        const bet = interaction.options.getInteger('amount', true);
        const side = interaction.options.getString('side', true);
        const balance = await getPoints(userId);

        if (bet < MIN_BET || balance < bet) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ **${MIN_BET}** –æ—á–∫–æ–≤!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
        const loadingEmbed = new EmbedBuilder()
          .setTitle('ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç—É...')
          .setDescription('üåÄ –ú–æ–Ω–µ—Ç–∞ –∫—Ä—É—Ç–∏—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ...')
          .setColor('Yellow');
        
        await interaction.editReply({ embeds: [loadingEmbed] });
        await new Promise(resolve => setTimeout(resolve, 2000));

        const result = Math.random() < 0.5 ? 'heads' : 'tails';
        const won = result === side;
        const winAmount = won ? bet * 2 : 0;
        
        await addPoints(userId, won ? bet : -bet);

        const resultEmoji = result === 'heads' ? 'ü™ô' : '‚ö°';
        const sideEmoji = side === 'heads' ? 'ü™ô' : '‚ö°';
        
        const embed = new EmbedBuilder()
          .setTitle('ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã')
          .addFields(
            { name: 'üéØ –í—ã–ø–∞–ª–æ', value: `${resultEmoji} ${result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}`, inline: true },
            { name: '–¢–≤–æ–π –≤—ã–±–æ—Ä', value: `${sideEmoji} ${side === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}`, inline: true },
            { name: 'üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç', value: won ? `${getRandomAnimation('win')} **+${bet}** –æ—á–∫–æ–≤!` : `${getRandomAnimation('lose')} **-${bet}** –æ—á–∫–æ–≤`, inline: false }
          )
          .setColor(won ? 'Green' : 'Red')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }

      case 'pvp':
        await showPvPMenu(interaction);
        break;

      case 'duel':
        await createDuel(interaction);
        break;

      case 'shop':
        await showShop(interaction);
        break;

      case 'inventory':
        await showInventory(interaction);
        break;

      case 'leaderboard': {
        const top = await getTopUsers(100);
        let page = 0;

        const getEmbed = (p: number) => {
          const embed = new EmbedBuilder()
            .setTitle('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤')
            .setDescription('–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –∫–∞–∑–∏–Ω–æ')
            .setColor('Gold')
            .setTimestamp();
          
          top.slice(p * 10, p * 10 + 10).forEach((u, i) => {
            const rank = p * 10 + i + 1;
            const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : 'üèÖ';
            embed.addFields({
              name: `${medal} ${rank} –º–µ—Å—Ç–æ`,
              value: `<@${u.id}>\nüíé **${u.points.toLocaleString()}** –æ—á–∫–æ–≤`,
              inline: true
            });
          });
          
          return embed;
        };

        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
          new ButtonBuilder().setCustomId('prev').setLabel('‚óÄ –ù–∞–∑–∞–¥').setStyle(ButtonStyle.Secondary),
          new ButtonBuilder().setCustomId('next').setLabel('–í–ø–µ—Ä—ë–¥ ‚ñ∂').setStyle(ButtonStyle.Secondary)
        );

        const msg = await interaction.editReply({ embeds: [getEmbed(page)], components: [row] });
        const collector = (msg as Message).createMessageComponentCollector({ 
          componentType: ComponentType.Button, 
          time: 60000 
        });

        collector.on('collect', async btn => {
          if (btn.user.id !== userId)
            return btn.reply({ 
              content: '‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã!', 
              flags: MessageFlags.Ephemeral 
            });

          if (btn.customId === 'next' && (page + 1) * 10 < top.length) page++;
          else if (btn.customId === 'prev' && page > 0) page--;

          await btn.update({ embeds: [getEmbed(page)] });
        });
        break;
      }

      case 'pay': {
        const target = interaction.options.getUser('user', true);
        const amount = interaction.options.getInteger('amount', true);

        if (target.bot || target.id === userId) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }
        
        if (amount < MIN_TRANSFER) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: **${MIN_TRANSFER}** –æ—á–∫–æ–≤`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }
        
        const balance = await getPoints(userId);
        if (balance < amount) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç **${amount - balance}** –æ—á–∫–æ–≤.`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        await ensureUserExists(target.id);
        await addPoints(userId, -amount);
        await addPoints(target.id, amount);

        const embed = new EmbedBuilder()
          .setTitle('üí∏ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω')
          .setDescription(`**${interaction.user.displayName}** ‚Üí **${target.displayName}**\nüíé –°—É–º–º–∞: **${amount.toLocaleString()}** –æ—á–∫–æ–≤`)
          .setColor('Green')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }

      // –∏–≥—Ä—ã
      case 'casino': {
        const bet = interaction.options.getInteger('amount', true);
        const balance = await getPoints(userId);

        if (bet < MIN_BET || balance < bet) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ **${MIN_BET}** –æ—á–∫–æ–≤!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
        const slots = ['üçí', 'üçã', 'üîî', 'üíé', '7Ô∏è‚É£'];
        const loadingEmbed = new EmbedBuilder()
          .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
          .setDescription('üé≤ –ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è...\n| ? | ? | ? |')
          .setColor('Blue');
        
        await interaction.editReply({ embeds: [loadingEmbed] });
        await new Promise(resolve => setTimeout(resolve, 2000));

        const result = Array.from({ length: 3 }, () => slots[Math.floor(Math.random() * slots.length)]);
        const jackpot = result.every(s => s === result[0]);
        const win = jackpot ? bet * 5 : 0;
        
        await addPoints(userId, win - bet);
        await addPoints('casino', bet - win); 


        const embed = new EmbedBuilder()
          .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
          .setDescription(`**| ${result.join(' | ')} |**\n\n${win > 0 ? 
            `${getRandomAnimation('win')} **–î–ñ–ï–ö–ü–û–¢!** –í—ã–∏–≥—Ä—ã—à: **${win.toLocaleString()}** –æ—á–∫–æ–≤!` : 
            `${getRandomAnimation('lose')} –ü—Ä–æ–∏–≥—Ä—ã—à: **${bet.toLocaleString()}** –æ—á–∫–æ–≤`}`)
          .setColor(win > 0 ? 'Green' : 'Red')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }

      case 'jackpot': {
        const bet = interaction.options.getInteger('amount', true);
        const balance = await getPoints(userId);

        if (bet < MIN_BET || balance < bet) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ **${MIN_BET}** –æ—á–∫–æ–≤!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        await createAnimatedMessage(interaction, '‚ö° –î–∂–µ–∫–ø–æ—Ç', '–û–ø—Ä–µ–¥–µ–ª—è—é –º–Ω–æ–∂–∏—Ç–µ–ª—å...', 'Yellow');

        const chances = [
          { multiplier: 0, chance: 0.4 },
          { multiplier: 0.5, chance: 0.25 },
          { multiplier: 1, chance: 0.2 },
          { multiplier: 2, chance: 0.1 },
          { multiplier: 5, chance: 0.04 },
          { multiplier: 10, chance: 0.01 }
        ];

        let roll = Math.random(), acc = 0, multiplier = 0;
        for (const c of chances) {
          acc += c.chance;
          if (roll <= acc) { multiplier = c.multiplier; break; }
        }

        const win = Math.floor(bet * multiplier);
        await addPoints(userId, win - bet);

        const embed = new EmbedBuilder()
          .setTitle('‚ö° –î–∂–µ–∫–ø–æ—Ç')
          .addFields(
            { name: 'üéØ –°—Ç–∞–≤–∫–∞', value: `**${bet.toLocaleString()}** –æ—á–∫–æ–≤`, inline: true },
            { name: 'üé≤ –ú–Ω–æ–∂–∏—Ç–µ–ª—å', value: `**${multiplier}x**`, inline: true },
            { name: 'üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç', value: 
              win > bet ? `${getRandomAnimation('win')} **+${(win - bet).toLocaleString()}** –æ—á–∫–æ–≤!` :
              win === bet ? 'üîÑ –ù–∏—á—å—è!' :
              `${getRandomAnimation('lose')} **-${(bet - win).toLocaleString()}** –æ—á–∫–æ–≤`, 
              inline: false }
          )
          .setColor(win > bet ? 'Green' : win === bet ? 'Yellow' : 'Red')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }

      case 'roulette': {
        const bet = interaction.options.getInteger('amount', true);
        const color = interaction.options.getString('color', true);
        const balance = await getPoints(userId);

        if (bet < MIN_BET || balance < bet) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ **${MIN_BET}** –æ—á–∫–æ–≤!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        await createAnimatedMessage(interaction, 'üé° –†—É–ª–µ—Ç–∫–∞', 'üåÄ –®–∞—Ä–∏–∫ –∫—Ä—É—Ç–∏—Ç—Å—è...', 'Purple');

        const wheel = Math.random();
        let resultColor = 'black';
        if (wheel < 0.027) resultColor = 'green';
        else if (wheel < 0.5135) resultColor = 'red';

        const colorEmojis = { red: 'üî¥', black: '‚ö´', green: 'üü¢' };
        const multiplier = color === resultColor ? (color === 'green' ? 14 : 2) : 0;
        const win = Math.floor(bet * multiplier);
        
        await addPoints(userId, win - bet);

        const embed = new EmbedBuilder()
          .setTitle('üé° –†—É–ª–µ—Ç–∫–∞')
          .addFields(
            { name: 'üéØ –í—ã–ø–∞–ª–æ', value: `${colorEmojis[resultColor as keyof typeof colorEmojis]} ${resultColor}`, inline: true },
            { name: '–¢–≤–æ–π –≤—ã–±–æ—Ä', value: `${colorEmojis[color as keyof typeof colorEmojis]} ${color}`, inline: true },
            { name: 'üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç', value: 
              multiplier > 0 ? `${getRandomAnimation('win')} **+${(win - bet).toLocaleString()}** –æ—á–∫–æ–≤!` :
              `${getRandomAnimation('lose')} **-${bet.toLocaleString()}** –æ—á–∫–æ–≤`, 
              inline: false }
          )
          .setColor(multiplier > 0 ? 'Green' : 'Red')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }

      case 'dice': {
        const bet = interaction.options.getInteger('amount', true);
        const balance = await getPoints(userId);

        if (bet < MIN_BET || balance < bet) {
          await interaction.deleteReply();
          await interaction.followUp({ 
            content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ **${MIN_BET}** –æ—á–∫–æ–≤!`, 
            flags: MessageFlags.Ephemeral 
          });
          return;
        }

        await createAnimatedMessage(interaction, 'üé≤ –ö–æ—Å—Ç–∏', 'üéØ –ë—Ä–æ—Å–∞—é –∫–æ—Å—Ç–∏...', 'Orange');

        const roll1 = Math.floor(Math.random() * 6) + 1;
        const roll2 = Math.floor(Math.random() * 6) + 1;
        const sum = roll1 + roll2;
        const multiplier = sum > 7 ? 2 : sum === 7 ? 1 : 0;
        const win = bet * multiplier;

        await addPoints(userId, win - bet);
        
        const embed = new EmbedBuilder()
          .setTitle('üé≤ –ö–æ—Å—Ç–∏')
          .addFields(
            { name: 'üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç', value: `üé≤ ${roll1} + üé≤ ${roll2} = **${sum}**`, inline: false },
            { name: 'üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç', value: 
              multiplier > 1 ? `${getRandomAnimation('win')} **+${(win - bet).toLocaleString()}** –æ—á–∫–æ–≤!` :
              multiplier === 1 ? 'üîÑ –ù–∏—á—å—è!' :
              `${getRandomAnimation('lose')} **-${bet.toLocaleString()}** –æ—á–∫–æ–≤`, 
              inline: false }
          )
          .setColor(multiplier > 1 ? 'Green' : multiplier === 1 ? 'Yellow' : 'Red')
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
        break;
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥:", error);
  }
}

async function showMainMenu(interaction: any) {
  const userId = interaction.user.id;
  const points = await getPoints(userId);
  const profile = await getUserProfile(userId);

  const embed = new EmbedBuilder()
    .setTitle('üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ')
    .setDescription(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **${interaction.user.displayName}**!\nüíé –ë–∞–ª–∞–Ω—Å: **${points.toLocaleString()}** –æ—á–∫–æ–≤\nüèÜ –£—Ä–æ–≤–µ–Ω—å: **${profile.level}**`)
    .setColor('Gold')
    .setThumbnail(interaction.user.displayAvatarURL())
    .addFields(
      { name: 'üéÆ –ò–≥—Ä—ã', value: '–°–ª–æ—Ç—ã, –†—É–ª–µ—Ç–∫–∞, –ö–æ—Å—Ç–∏, –î–∂–µ–∫–ø–æ—Ç', inline: true },
      { name: '‚öîÔ∏è PvP', value: '–î—É—ç–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏', inline: true },
      { name: 'üõí –ú–∞–≥–∞–∑–∏–Ω', value: '–ü–æ–∫—É–ø–∞–π —É–ª—É—á—à–µ–Ω–∏—è', inline: true }
    )
    .setTimestamp();

  const row1 = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('games_menu').setLabel('üéÆ –ò–≥—Ä—ã').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('pvp_menu').setLabel('‚öîÔ∏è PvP').setStyle(ButtonStyle.Danger),
    new ButtonBuilder().setCustomId('shop_menu').setLabel('üõí –ú–∞–≥–∞–∑–∏–Ω').setStyle(ButtonStyle.Success)
  );

  const row2 = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('profile_menu').setLabel('üë§ –ü—Ä–æ—Ñ–∏–ª—å').setStyle(ButtonStyle.Secondary),
    new ButtonBuilder().setCustomId('leaderboard_menu').setLabel('üèÜ –†–µ–π—Ç–∏–Ω–≥').setStyle(ButtonStyle.Secondary),
    new ButtonBuilder().setCustomId('daily_bonus').setLabel('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å').setStyle(ButtonStyle.Secondary)
  );

  await interaction.editReply({ embeds: [embed], components: [row1, row2] });
}

async function showProfile(interaction: any) {
  const targetUser = interaction.options.getUser('user') || interaction.user;
  const profile = await getUserProfile(targetUser.id);
  const inventory = await getUserInventory(targetUser.id);

  const embed = new EmbedBuilder()
    .setTitle(`üë§ –ü—Ä–æ—Ñ–∏–ª—å ${targetUser.displayName}`)
    .setThumbnail(targetUser.displayAvatarURL())
    .setColor('Blue')
    .addFields(
      { name: 'üíé –û—á–∫–∏', value: `**${profile.points.toLocaleString()}**`, inline: true },
      { name: 'üèÜ –£—Ä–æ–≤–µ–Ω—å', value: `**${profile.level}**`, inline: true },
      { name: '‚≠ê –û–ø—ã—Ç', value: `**${profile.experience}**/100`, inline: true },
      { name: 'üéØ –ü–æ–±–µ–¥', value: `**${profile.wins}**`, inline: true },
      { name: 'üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ', value: `**${profile.gamesPlayed}**`, inline: true },
      { name: 'üìä –í–∏–Ω—Ä–µ–π—Ç', value: `**${profile.gamesPlayed > 0 ? Math.round((profile.wins / profile.gamesPlayed) * 100) : 0}%**`, inline: true }
    )
    .setTimestamp();

  if (inventory.length > 0) {
    const items = inventory.slice(0, 5).map(item => `${item.emoji} ${item.name} x${item.quantity}`).join('\n');
    embed.addFields({ name: 'üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Ç–æ–ø 5)', value: items, inline: false });
  }

  await interaction.editReply({ embeds: [embed] });
}

async function showPvPMenu(interaction: any) {
  const activeGames = Array.from(pvpGames.entries()).filter(([_, game]) => 
    game.creator === interaction.user.id || game.opponent === interaction.user.id
  );

  const embed = new EmbedBuilder()
    .setTitle('‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞')
    .setDescription('–°—Ä–∞–∂–∞–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!')
    .setColor('Red')
    .addFields(
      { name: 'üé∞ –°–ª–æ—Ç—ã', value: '–ö—Ç–æ –±–æ–ª—å—à–µ –Ω–∞–±–µ—Ä—ë—Ç', inline: true },
      { name: 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞', value: '–£–≥–∞–¥–∞–π —Å—Ç–æ—Ä–æ–Ω—É', inline: true },
      { name: 'üé≤ –ö–æ—Å—Ç–∏', value: '–í—ã—à–µ —Å—É–º–º–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç', inline: true }
    );

  if (activeGames.length > 0) {
    const gamesList = activeGames.map(([id, game]) => {
      const status = game.opponent ? 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ';
      return `**${game.game.toUpperCase()}** - ${game.bet} –æ—á–∫–æ–≤ ${status}`;
    }).join('\n');
    embed.addFields({ name: 'üéØ –¢–≤–æ–∏ –∏–≥—Ä—ã', value: gamesList, inline: false });
  }

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('create_duel').setLabel('‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('join_duel').setLabel('üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è').setStyle(ButtonStyle.Success),
    new ButtonBuilder().setCustomId('active_duels').setLabel('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏').setStyle(ButtonStyle.Secondary)
  );

  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function createDuel(interaction: any) {
  const opponent = interaction.options.getUser('opponent', true);
  const amount = interaction.options.getInteger('amount', true);
  const gameType = interaction.options.getString('game', true);

  if (opponent.bot || opponent.id === interaction.user.id) {
    await interaction.deleteReply();
    await interaction.followUp({ 
      content: '‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –±–æ—Ç–∞!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  if (amount < MIN_PVP_BET) {
    await interaction.deleteReply();
    await interaction.followUp({ 
      content: `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è PvP: **${MIN_PVP_BET}** –æ—á–∫–æ–≤!`, 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  const balance = await getPoints(interaction.user.id);
  const opponentBalance = await getPoints(opponent.id);

  if (balance < amount || opponentBalance < amount) {
    await interaction.deleteReply();
    await interaction.followUp({ 
      content: 'üí∏ –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  const gameId = `${interaction.user.id}_${Date.now()}`;
  pvpGames.set(gameId, {
    creator: interaction.user.id,
    bet: amount,
    game: gameType as 'duel' | 'coinflip' | 'dice',
    createdAt: Date.now()
  });

  const gameNames = {
    'slots': 'üé∞ –°–ª–æ—Ç—ã',
    'coinflip': 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞', 
    'dice': 'üé≤ –ö–æ—Å—Ç–∏'
  };

  const embed = new EmbedBuilder()
    .setTitle('‚öîÔ∏è –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!')
    .setDescription(`**${interaction.user.displayName}** –≤—ã–∑—ã–≤–∞–µ—Ç **${opponent.displayName}** –Ω–∞ –¥—É—ç–ª—å!`)
    .addFields(
      { name: 'üéÆ –ò–≥—Ä–∞', value: gameNames[gameType as keyof typeof gameNames], inline: true },
      { name: 'üí∞ –°—Ç–∞–≤–∫–∞', value: `**${amount.toLocaleString()}** –æ—á–∫–æ–≤`, inline: true },
      { name: '‚è∞ –í—Ä–µ–º—è', value: '5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ', inline: true }
    )
    .setColor('Orange')
    .setTimestamp();

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId(`accept_duel_${gameId}`).setLabel('‚úÖ –ü—Ä–∏–Ω—è—Ç—å').setStyle(ButtonStyle.Success),
    new ButtonBuilder().setCustomId(`decline_duel_${gameId}`).setLabel('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å').setStyle(ButtonStyle.Danger)
  );

  await interaction.editReply({ 
    content: `<@${opponent.id}>`, 
    embeds: [embed], 
    components: [row] 
  });
}

async function showShop(interaction: any) {
  const items = await getShopItems();
  const userPoints = await getPoints(interaction.user.id);

  if (items.length === 0) {
    await interaction.editReply({
      embeds: [new EmbedBuilder()
        .setTitle('üõí –ú–∞–≥–∞–∑–∏–Ω')
        .setDescription('–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç!')
        .setColor('Yellow')]
    });
    return;
  }

  let page = 0;
  const itemsPerPage = 6;
  const maxPages = Math.ceil(items.length / itemsPerPage);

  const getEmbed = (p: number) => {
    const embed = new EmbedBuilder()
      .setTitle('üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
      .setDescription(`üíé –í–∞—à –±–∞–ª–∞–Ω—Å: **${userPoints.toLocaleString()}** –æ—á–∫–æ–≤\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${p + 1}/${maxPages}`)
      .setColor('Green')
      .setTimestamp();

    const pageItems = items.slice(p * itemsPerPage, (p + 1) * itemsPerPage);
    pageItems.forEach(item => {
      const affordable = userPoints >= item.price ? '‚úÖ' : '‚ùå';
      embed.addFields({
        name: `${item.emoji} ${item.name}`,
        value: `${item.description}\nüí∞ **${item.price.toLocaleString()}** –æ—á–∫–æ–≤ ${affordable}`,
        inline: true
      });
    });

    return embed;
  };

  const getButtons = (p: number) => {
    const row1 = new ActionRowBuilder<ButtonBuilder>();
    const pageItems = items.slice(p * itemsPerPage, (p + 1) * itemsPerPage);
    
    pageItems.slice(0, 3).forEach((item, i) => {
      row1.addComponents(
        new ButtonBuilder()
          .setCustomId(`buy_${item.id}`)
          .setLabel(`${item.emoji} ${item.price.toLocaleString()}`)
          .setStyle(userPoints >= item.price ? ButtonStyle.Success : ButtonStyle.Secondary)
          .setDisabled(userPoints < item.price)
      );
    });

    const row2 = new ActionRowBuilder<ButtonBuilder>();
    pageItems.slice(3, 6).forEach((item, i) => {
      row2.addComponents(
        new ButtonBuilder()
          .setCustomId(`buy_${item.id}`)
          .setLabel(`${item.emoji} ${item.price.toLocaleString()}`)
          .setStyle(userPoints >= item.price ? ButtonStyle.Success : ButtonStyle.Secondary)
          .setDisabled(userPoints < item.price)
      );
    });

    const row3 = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId('shop_prev').setLabel('‚óÄ –ù–∞–∑–∞–¥').setStyle(ButtonStyle.Primary).setDisabled(p === 0),
      new ButtonBuilder().setCustomId('shop_next').setLabel('–í–ø–µ—Ä—ë–¥ ‚ñ∂').setStyle(ButtonStyle.Primary).setDisabled(p === maxPages - 1),
      new ButtonBuilder().setCustomId('inventory_btn').setLabel('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å').setStyle(ButtonStyle.Secondary)
    );

    return [row1, row2, row3].filter(row => row.components.length > 0);
  };

  await interaction.editReply({ 
    embeds: [getEmbed(page)], 
    components: getButtons(page) 
  });
}

async function showInventory(interaction: any) {
  const inventory = await getUserInventory(interaction.user.id);
  
  if (inventory.length === 0) {
    await interaction.editReply({
      embeds: [new EmbedBuilder()
        .setTitle('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å')
        .setDescription('–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!\n–ó–∞–π–¥–∏ –≤ üõí –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.')
        .setColor('Yellow')
        .setThumbnail(interaction.user.displayAvatarURL())]
    });
    return;
  }

  const embed = new EmbedBuilder()
    .setTitle('üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    .setDescription(`–£ —Ç–µ–±—è **${inventory.length}** —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    .setColor('Purple')
    .setThumbnail(interaction.user.displayAvatarURL())
    .setTimestamp();

  inventory.forEach(item => {
    embed.addFields({
      name: `${item.emoji} ${item.name}`,
      value: `${item.description}\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **${item.quantity}**`,
      inline: true
    });
  });

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('shop_menu').setLabel('üõí –ú–∞–≥–∞–∑–∏–Ω').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId('use_items').setLabel('‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å').setStyle(ButtonStyle.Success).setDisabled(true)
  );

  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function handleComponentInteraction(interaction: any) {
  try {
    const userId = interaction.user.id;

    if (interaction.isButton()) {
      const customId = interaction.customId;

      // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      if (customId === 'games_menu') {
        await interaction.deferUpdate();
        await showGamesMenu(interaction);
      }
      else if (customId === 'pvp_menu') {
        await interaction.deferUpdate();
        await showPvPMenu(interaction);
      }
      else if (customId === 'shop_menu') {
        await interaction.deferUpdate();
        await showShop(interaction);
      }
      else if (customId === 'profile_menu') {
        await interaction.deferUpdate();
        const profile = await getUserProfile(userId);
        const embed = new EmbedBuilder()
          .setTitle(`üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å`)
          .setThumbnail(interaction.user.displayAvatarURL())
          .setColor('Blue')
          .addFields(
            { name: 'üíé –û—á–∫–∏', value: `**${profile.points.toLocaleString()}**`, inline: true },
            { name: 'üèÜ –£—Ä–æ–≤–µ–Ω—å', value: `**${profile.level}**`, inline: true },
            { name: '‚≠ê –û–ø—ã—Ç', value: `**${profile.experience}**/100`, inline: true },
            { name: 'üéØ –ü–æ–±–µ–¥', value: `**${profile.wins}**`, inline: true },
            { name: 'üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ', value: `**${profile.gamesPlayed}**`, inline: true },
            { name: 'üìä –í–∏–Ω—Ä–µ–π—Ç', value: `**${profile.gamesPlayed > 0 ? Math.round((profile.wins / profile.gamesPlayed) * 100) : 0}%**`, inline: true }
          )
          .setTimestamp();

        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
          new ButtonBuilder().setCustomId('back_to_menu').setLabel('üîô –ù–∞–∑–∞–¥').setStyle(ButtonStyle.Secondary),
          new ButtonBuilder().setCustomId('inventory_btn').setLabel('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å').setStyle(ButtonStyle.Primary)
        );

        await interaction.editReply({ embeds: [embed], components: [row] });
      } else if (customId === 'daily_bonus') {
        await interaction.deferUpdate();
        await handleDailyBonus(interaction);
      } else if (customId === 'back_to_menu') {
        await interaction.deferUpdate();
        await showMainMenu(interaction);
      } else if (customId === 'inventory_btn') {
        await interaction.deferUpdate();
        await showInventory(interaction);
      }

      // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      else if (customId.startsWith('buy_')) {
        await interaction.deferUpdate();
        const itemId = parseInt(customId.split('_')[1]);
        await handlePurchase(interaction, itemId);
      }
      else if (customId.startsWith('accept_duel_')) {
        await interaction.deferUpdate();
        const gameId = customId.replace('accept_duel_', '');
        await handleDuelAccept(interaction, gameId);
      }
      else if (customId.startsWith('decline_duel_')) {
        await interaction.deferUpdate();
        const gameId = customId.replace('decline_duel_', '');
        await handleDuelDecline(interaction, gameId);
      }

    }
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:", error);
  }
}

async function showGamesMenu(interaction: any) {
  const profile = await getUserProfile(interaction.user.id);
  
  const embed = new EmbedBuilder()
    .setTitle('üéÆ –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é')
    .setDescription(`–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, **${interaction.user.displayName}**!\nüíé –ë–∞–ª–∞–Ω—Å: **${profile.points.toLocaleString()}** –æ—á–∫–æ–≤`)
    .setColor('Blue')
    .addFields(
      { name: 'üé∞ –°–ª–æ—Ç—ã (/casino)', value: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å–ª–æ—Ç—ã\n–ú–∏–Ω–∏–º—É–º: 200 –æ—á–∫–æ–≤', inline: true },
      { name: '‚ö° –î–∂–µ–∫–ø–æ—Ç (/jackpot)', value: '–ê–∑–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º\n–ë–æ–ª—å—à–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏!', inline: true },
      { name: 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞ (/coinflip)', value: '–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞\n–®–∞–Ω—Å 50/50', inline: true },
      { name: 'üé° –†—É–ª–µ—Ç–∫–∞ (/roulette)', value: '–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç\n–ö—Ä–∞—Å–Ω—ã–π/–ß—ë—Ä–Ω—ã–π/–ó–µ–ª—ë–Ω—ã–π', inline: true },
      { name: 'üé≤ –ö–æ—Å—Ç–∏ (/dice)', value: '–°—É–º–º–∞ > 7 = –ø–æ–±–µ–¥–∞\n–°—É–º–º–∞ = 7 = –Ω–∏—á—å—è', inline: true },
      { name: '‚öîÔ∏è PvP (/pvp)', value: '–ò–≥—Ä–∞–π –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–æ–≤\n–ú–∏–Ω–∏–º—É–º: 500 –æ—á–∫–æ–≤', inline: true }
    )
    .setTimestamp();

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('back_to_menu').setLabel('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é').setStyle(ButtonStyle.Secondary),
    new ButtonBuilder().setCustomId('pvp_menu').setLabel('‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞').setStyle(ButtonStyle.Danger)
  );

  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function handleDailyBonus(interaction: any) {
  const userId = interaction.user.id;
  const last = await getLastDaily(userId);
  const now = Date.now();

  if (last && now - last < 86400000) {
    const left = 86400000 - (now - last);
    const hours = Math.floor(left / 3600000);
    const minutes = Math.floor((left % 3600000) / 60000);

    const embed = new EmbedBuilder()
      .setTitle('‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å')
      .setDescription(`–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑: **${hours}—á ${minutes}–º**`)
      .setColor('Yellow')
      .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId('back_to_menu').setLabel('üîô –ù–∞–∑–∞–¥').setStyle(ButtonStyle.Secondary)
    );

    await interaction.editReply({ embeds: [embed], components: [row] });
    return;
  }

  const profile = await getUserProfile(userId);
  const bonus = 100 + Math.floor(Math.random() * 50) + (profile.level * 10);
  const expGain = 25;
  
  await addPoints(userId, bonus);
  await updateUserProfile(userId, { experience: profile.experience + expGain });
  await setLastDaily(userId, now);

  const embed = new EmbedBuilder()
    .setTitle('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!')
    .setDescription(`${getRandomAnimation('win')} **+${bonus}** –æ—á–∫–æ–≤!\n‚≠ê **+${expGain}** –æ–ø—ã—Ç–∞!\n\nüí° –ü—Ä–∏—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–æ–º!`)
    .setColor('Green')
    .setThumbnail(interaction.user.displayAvatarURL())
    .setTimestamp();

  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId('back_to_menu').setLabel('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é').setStyle(ButtonStyle.Secondary),
    new ButtonBuilder().setCustomId('shop_menu').setLabel('üõí –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ').setStyle(ButtonStyle.Success)
  );

  await interaction.editReply({ embeds: [embed], components: [row] });
}

async function handlePurchase(interaction: any, itemId: number) {
  const userId = interaction.user.id;
  const userPoints = await getPoints(userId);
  const items = await getShopItems();
  const item = items.find(i => i.id === itemId);

  if (!item) {
    await interaction.followUp({ 
      content: '‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  if (userPoints < item.price) {
    await interaction.followUp({ 
      content: `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù—É–∂–Ω–æ –µ—â—ë **${item.price - userPoints}** –æ—á–∫–æ–≤.`, 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  try {
    await buyShopItem(userId, itemId);
    await addPoints(userId, -item.price);

    const embed = new EmbedBuilder()
      .setTitle('‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!')
      .setDescription(`–¢—ã –∫—É–ø–∏–ª **${item.emoji} ${item.name}**!\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${item.price.toLocaleString()}** –æ—á–∫–æ–≤`)
      .setColor('Green')
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], flags: MessageFlags.Ephemeral });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    await showShop(interaction);
  } catch (error) {
    await interaction.followUp({ 
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!', 
      flags: MessageFlags.Ephemeral 
    });
  }
}

async function handleDuelAccept(interaction: any, gameId: string) {
  const game = pvpGames.get(gameId);
  if (!game) {
    await interaction.followUp({ 
      content: '‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  if (interaction.user.id !== game.creator && interaction.user.id === game.opponent) {
    await interaction.followUp({ 
      content: '‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –¥—É—ç–ª—å!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  game.opponent = interaction.user.id;
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
  await startPvPGame(interaction, gameId, game);
}

async function handleDuelDecline(interaction: any, gameId: string) {
  const game = pvpGames.get(gameId);
  if (!game) {
    await interaction.followUp({ 
      content: '‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 
      flags: MessageFlags.Ephemeral 
    });
    return;
  }

  pvpGames.delete(gameId);
  
  const embed = new EmbedBuilder()
    .setTitle('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    .setDescription(`**${interaction.user.displayName}** –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å!`)
    .setColor('Red')
    .setTimestamp();

  await interaction.editReply({ embeds: [embed], components: [] });
}

async function startPvPGame(interaction: any, gameId: string, game: any) {
  const creator = await interaction.guild.members.fetch(game.creator);
  const opponent = await interaction.guild.members.fetch(game.opponent);

  // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
  await addPoints(game.creator, -game.bet);
  await addPoints(game.opponent, -game.bet);

  let result = '';
  let winner = '';

  switch (game.game) {
    case 'slots': {
      const slots = ['üçí', 'üçã', 'üîî', 'üíé', '7Ô∏è‚É£'];
      const creatorResult = Array.from({ length: 3 }, () => slots[Math.floor(Math.random() * slots.length)]);
      const opponentResult = Array.from({ length: 3 }, () => slots[Math.floor(Math.random() * slots.length)]);
      
      const creatorScore = creatorResult.every(s => s === creatorResult[0]) ? 3 : creatorResult.filter((s, i, arr) => arr.indexOf(s) !== i).length;
      const opponentScore = opponentResult.every(s => s === opponentResult[0]) ? 3 : opponentResult.filter((s, i, arr) => arr.indexOf(s) !== i).length;
      
      result = `**${creator.displayName}:** | ${creatorResult.join(' | ')} |\n**${opponent.displayName}:** | ${opponentResult.join(' | ')} |`;
      
      if (creatorScore > opponentScore) winner = game.creator;
      else if (opponentScore > creatorScore) winner = game.opponent;
      break;
    }
    
    case 'coinflip': {
      const creatorChoice = Math.random() < 0.5 ? 'heads' : 'tails';
      const opponentChoice = creatorChoice === 'heads' ? 'tails' : 'heads';
      const coinResult = Math.random() < 0.5 ? 'heads' : 'tails';
      
      result = `ü™ô –í—ã–ø–∞–ª–æ: **${coinResult === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}**\n${creator.displayName}: ${creatorChoice === 'heads' ? 'ü™ô' : '‚ö°'}\n${opponent.displayName}: ${opponentChoice === 'heads' ? 'ü™ô' : '‚ö°'}`;
      
      if (coinResult === creatorChoice) winner = game.creator;
      else winner = game.opponent;
      break;
    }
    
    case 'dice': {
      const creatorRoll = Math.floor(Math.random() * 6) + 1 + Math.floor(Math.random() * 6) + 1;
      const opponentRoll = Math.floor(Math.random() * 6) + 1 + Math.floor(Math.random() * 6) + 1;
      
      result = `**${creator.displayName}:** üé≤ ${creatorRoll}\n**${opponent.displayName}:** üé≤ ${opponentRoll}`;
      
      if (creatorRoll > opponentRoll) winner = game.creator;
      else if (opponentRoll > creatorRoll) winner = game.opponent;
      break;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–∑
  if (winner) {
    await addPoints(winner, game.bet * 2);
    const winnerMember = winner === game.creator ? creator : opponent;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const winnerProfile = await getUserProfile(winner);
    const loserProfile = await getUserProfile(winner === game.creator ? game.opponent : game.creator);
    
    await updateUserProfile(winner, { 
      wins: winnerProfile.wins + 1, 
      gamesPlayed: winnerProfile.gamesPlayed + 1,
      experience: winnerProfile.experience + 50
    });
    await updateUserProfile(winner === game.creator ? game.opponent : game.creator, { 
      gamesPlayed: loserProfile.gamesPlayed + 1,
      experience: loserProfile.experience + 25
    });

    const embed = new EmbedBuilder()
      .setTitle('‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏')
      .setDescription(`${result}\n\nüèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** ${winnerMember.displayName}\nüí∞ **–í—ã–∏–≥—Ä—ã—à:** ${(game.bet * 2).toLocaleString()} –æ—á–∫–æ–≤`)
      .setColor('Green')
      .setTimestamp();

    await interaction.editReply({ embeds: [embed], components: [] });
  } else {
    // –ù–∏—á—å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
    await addPoints(game.creator, game.bet);
    await addPoints(game.opponent, game.bet);

    const embed = new EmbedBuilder()
      .setTitle('‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏')
      .setDescription(`${result}\n\nü§ù **–ù–∏—á—å—è!** –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`)
      .setColor('Yellow')
      .setTimestamp();

    await interaction.editReply({ embeds: [embed], components: [] });
  }

  pvpGames.delete(gameId);
}

client.login(process.env.BOT_TOKEN);
